public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if(intervals.size()==0){
            intervals.add(newInterval);
            return intervals;
        }
        if(newInterval.start>intervals.get(intervals.size()-1).end){
            intervals.add(newInterval);
            return intervals;
        }
        if(newInterval.end<intervals.get(0).start){
            intervals.add(0,newInterval);
            return intervals;
        }
        List<Interval> res = new ArrayList<Interval>();
        int i = 0;
        while(i<intervals.size()){
            if(newInterval.start<=intervals.get(i).end){
                break;
            }
            i++;
        }
        int j = intervals.size()-1;
        while(j>=0){
            if(newInterval.end>=intervals.get(j).start){
                break;
            }
            j--;
        }
        if(i>j){
            intervals.add(j+1,newInterval);
            return intervals;
        }
        Interval itl = new Interval(Math.min(newInterval.start,intervals.get(i).start), Math.max(newInterval.end,intervals.get(j).end));
        int k = 0;
        while(k<i){
            res.add(intervals.get(k));
            k++;
        }
        res.add(itl);
        k = j+1;
        while(k<intervals.size()){
            res.add(intervals.get(k));
            k++;
        }
        return res;
    }
}
